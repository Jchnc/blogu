"use client";

import React, { useEffect, useState } from "react";
import { BlockNote } from "./BlockNote";
import { API_URL } from "@/utils/constants";
import ImageInput from "./ImageInput";

const CreateArticleForm: React.FC = () => {
	const [title, setTitle] = useState("");
	const [intro, setIntro] = useState("");
	const [image, setImage] = useState("");
	const [authorId, setAuthorId] = useState("");
	const [content, setContent] = useState<any>(null);
	const [html, setHTML] = useState<string>("");

	const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault();

		// If title, intro, authorId, or content is empty, return
		if (!title || !intro || !authorId || !content) {
			alert("All fields are required");
			return;
		}

		const articleData = {
			title,
			intro,
			content, // This should be an object
			image,
			authorId
		};

		try {
			const response = await fetch(`${API_URL}/articles`, {
				method: "POST",
				headers: {
					"Content-Type": "application/json"
				},
				body: JSON.stringify(articleData)
			});

			if (response.ok) {
				const newArticle = await response.json();
				console.log("Article created successfully:", newArticle);
			} else {
				const error = await response.json();
				console.error("Error creating article:", error);
			}
		} catch (error) {
			console.error("Error:", error);
		}
	};

	return (
		<form onSubmit={handleSubmit}>
			<div className="mb-2">
				<div className="bg-[#121d2f] text-sm border-[1px] border-[#214981] p-4 text-txt-primary rounded-xl my-2">
					<p>Article&apos;s Slug will be autogenerated from Title</p>
				</div>
				<label
					htmlFor="title"
					className="uppercase text-txt-secondary text-xs font-bold"
				>
					Title
				</label>
				<input
					id="title"
					className="p-2 bg-transparent border-[1px] border-bg-borders w-full text-txt-primary rounded-xl outline-none active:border-bg-borders-blue focus:border-bg-borders-blue transition-all ease-in-out duration-200"
					placeholder="Article Title"
					type="text"
					value={title}
					onChange={e => setTitle(e.target.value)}
					required
				/>
			</div>
			<div className="mb-2 hidden">
				<label
					htmlFor="image"
					className="uppercase text-txt-secondary text-xs font-bold"
				>
					Image URL
				</label>
				<input
					className="p-2 bg-transparent border-[1px] border-bg-borders w-full text-txt-primary rounded-xl outline-none active:border-bg-borders-blue focus:border-bg-borders-blue transition-all ease-in-out duration-200"
					placeholder="https://placehold.co/1366x600"
					id="image"
					type="text"
					value={image}
					onChange={e => setImage(e.target.value)}
				/>
			</div>
			<div className="mb-2">
				<ImageInput />
			</div>
			<div className="mb-2 hidden">
				<label className="uppercase text-txt-secondary text-xs font-bold">
					Author ID (Debug)
				</label>
				<input
					placeholder="Author ID"
					className="p-2 bg-transparent border-[1px] border-bg-borders w-full text-txt-primary rounded-xl outline-none active:border-bg-borders-blue focus:border-bg-borders-blue transition-all ease-in-out duration-200"
					type="text"
					value={authorId}
					onChange={e => setAuthorId(e.target.value)}
					required
				/>
			</div>
			<div className="mb-2">
				<label
					htmlFor="intro"
					className="uppercase text-txt-secondary text-xs font-bold"
				>
					Intro
				</label>
				<input
					id="intro"
					className="p-2 bg-transparent border-[1px] border-bg-borders w-full text-txt-primary rounded-xl outline-none active:border-bg-borders-blue focus:border-bg-borders-blue transition-all ease-in-out duration-200"
					placeholder="Article Intro"
					type="text"
					value={intro}
					onChange={e => setIntro(e.target.value)}
				/>
			</div>
			<div className="mb-2">
				<label className="uppercase text-txt-secondary text-xs font-bold">
					Content
				</label>
			</div>
			<BlockNote onChange={setContent} />
			<div className="flex flex-row gap-3">
				<button className="bg-[#121d2f] text-txt-primary p-2 rounded-xl w-full text-center mt-4 hover:bg-[#1a3d6c] transition-all ease-in-out duration-200">
					Cancel
				</button>
				<button
					type="submit"
					className="bg-[#214981] text-txt-primary p-2 rounded-xl w-full text-center mt-4 hover:bg-[#1a3d6c] transition-all ease-in-out duration-200"
				>
					Create Article
				</button>
			</div>
		</form>
	);
};

export default CreateArticleForm;
